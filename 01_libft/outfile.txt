// Project Source Code - Comments Removed
// Generated on: dom 23 mar 2025 16:30:13 WET



// ========== libft/ft_atoi.c ==========

#include "libft.h"
int	ft_atoi(const char *nptr)
{
	auto int i, signal, num;
	i = 0;
	signal = 1;
	num = 0;
	while ((nptr[i] != '\0' && nptr[i] >= '\t' && nptr[i] <= '\r')
		|| nptr[i] == ' ')
	{
		i++;
	}
	if (nptr[i] == '+' || nptr[i] == '-')
	{
		if (nptr[i++] == '-')
			signal = -1;
	}
	while (nptr[i] >= '0' && nptr[i] <= '9' && nptr[i] != '\0')
	{
		num = num * 10 + nptr[i++] - '0';
	}
	return (num * signal);
}


// ========== libft/ft_bzero.c ==========

#include "libft.h"
void	ft_bzero(void *s, size_t n)
{
	auto size_t i;
	auto unsigned char *ptr;
	i = 0;
	ptr = (unsigned char *)s;
	while (i < n)
		ptr[i++] = '\0';
}


// ========== libft/ft_calloc.c ==========

#include "libft.h"
void	*ft_calloc(size_t nmemb, size_t size)
{
	void	*ptr;
	ptr = malloc(nmemb * size);
	if (ptr == NULL)
		return (NULL);
	ft_bzero(ptr, nmemb * size);
	return (ptr);
}


// ========== libft/ft_isalnum.c ==========

#include "libft.h"
int	ft_isalnum(int c)
{
	if (ft_isdigit(c) == 1 || (ft_isalpha(c) == 1))
		return (1);
	return (0);
}


// ========== libft/ft_isalpha.c ==========

int	ft_isalpha(int c)
{
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
		return (1);
	return (0);
}


// ========== libft/ft_isascii.c ==========

int	ft_isascii(int c)
{
	if (c >= 0 && c <= 127)
		return (1);
	return (0);
}


// ========== libft/ft_isdigit.c ==========

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}


// ========== libft/ft_isprint.c ==========

int	ft_isprint(int c)
{
	if (c >= 32 && c <= 126)
		return (1);
	return (0);
}


// ========== libft/ft_itoa.c ==========

#include "libft.h"
static int	get_len(long n)
{
	int		len;
	len = 0;
	if (n == 0)
		return (len + 1);
	if (n < 0)
	{
		len++;
		n = n * -1;
	}
	while (n > 0)
	{
		n = n / 10;
		len++;
	}
	return (len);
}
static char	*space_str(int len)
{
	char	*str;
	str = malloc(sizeof(char) * len + 1);
	if (!str)
		return (NULL);
	return (str);
}
static long	abs_value(long n)
{
	if (n < 0)
		return (-n);
	return (n);
}
char	*ft_itoa(int n)
{
	auto int len, space_minus = 0, i = 0;
	auto long nbr_long;
	auto char *str;
	if (n < 0)
		space_minus = 1;
	len = get_len(n);
	nbr_long = abs_value((long)n);
	str = space_str(len);
	if (!str)
		return (NULL);
	while (i < len)
	{
		str[len - i++ - 1] = nbr_long % 10 + '0';
		if (len - i - 1 == 0 && space_minus == 1)
		{
			str[len - i++ - 1] = '-';
			continue ;
		}
		nbr_long = nbr_long / 10;
	}
	str[len] = '\0';
	return (str);
}


// ========== libft/ft_lstadd_back.c ==========

#include "libft.h"
void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*last;
	if (!new || !lst)
		return ;
	if (!*lst)
	{
		*lst = new;
		return ;
	}
	last = ft_lstlast(*lst);
	last->next = new;
}


// ========== libft/ft_lstadd_front.c ==========

#include "libft.h"
void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (!lst || !new)
		return ;
	new->next = *lst;
	*lst = new;
}


// ========== libft/ft_lstclear.c ==========

#include "libft.h"
void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*current;
	t_list	*temp;
	if (!lst || !del)
		return ;
	current = *lst;
	while (current != NULL)
	{
		temp = current;
		current = current->next;
		del(temp->content);
		free (temp);
	}
	*lst = NULL;
}


// ========== libft/ft_lstdelone.c ==========

#include "libft.h"
void	ft_lstdelone(t_list *lst, void (*del)(void *))
{
	if (!lst || !del)
		return ;
	(*del)(lst->content);
	free(lst);
}


// ========== libft/ft_lstiter.c ==========

#include "libft.h"
void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	if (!lst || !f)
		return ;
	while (lst)
	{
		f(lst->content);
		lst = lst->next;
	}
}


// ========== libft/ft_lstlast.c ==========

#include "libft.h"
t_list	*ft_lstlast(t_list *lst)
{
	t_list	*last;
	int		size;
	last = (t_list *)lst;
	size = ft_lstsize(lst);
	while (size > 1)
	{
		last = last->next;
		size--;
	}
	return (last);
}


// ========== libft/ft_lstmap.c ==========

#include "libft.h"
t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	auto t_list * ret_list, *current;
	if (!lst || !f || !del)
		return (NULL);
	current = ft_lstnew(f(lst->content));
	if (!current)
	{
		ft_lstclear(&current, del);
		return (NULL);
	}
	ret_list = current;
	lst = lst->next;
	while (lst)
	{
		current->next = ft_lstnew(f(lst->content));
		if (!current->next)
		{
			ft_lstclear(&ret_list, del);
			return (NULL);
		}
		lst = lst->next;
		current = current->next;
	}
	current->next = NULL;
	return (ret_list);
}


// ========== libft/ft_lstnew.c ==========

#include "libft.h"
t_list	*ft_lstnew(void *content)
{
	t_list	*new_list;
	new_list = (t_list *)malloc(sizeof(*new_list));
	if (!new_list)
		return (NULL);
	new_list->content = content;
	new_list->next = NULL;
	return (new_list);
}


// ========== libft/ft_lstsize.c ==========

#include "libft.h"
int	ft_lstsize(t_list *lst)
{
	int		size;
	t_list	*counter;
	size = 0;
	counter = (t_list *)lst;
	while (counter)
	{
		size++;
		counter = counter->next;
	}
	return (size);
}


// ========== libft/ft_memchr.c ==========

#include "libft.h"
void	*ft_memchr(const void *s, int c, size_t n)
{
	unsigned char	*res;
	res = (unsigned char *)s;
	if (n == 0)
		return (NULL);
	while (n != 0)
	{
		if (*res == (unsigned char)c)
			return (res);
		++res;
		--n;
	}
	return (NULL);
}


// ========== libft/ft_memcmp.c ==========

#include "libft.h"
int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	auto const char *str1, *str2;
	auto size_t i;
	str1 = (const char *)s1;
	str2 = (const char *)s2;
	i = -1;
	while (++i < n)
	{
		if (str1[i] != str2[i])
			return ((int)((unsigned char)str1[i] - (unsigned char)str2[i]));
	}
	return (0);
}


// ========== libft/ft_memcpy.c ==========

#include "libft.h"
void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t	i;
	i = 0;
	if (!dest && !src)
		return (NULL);
	while (i < n)
	{
		((unsigned char *)dest)[i] = ((const unsigned char *)src)[i];
		i++;
	}
	return (dest);
}


// ========== libft/ft_memmove.c ==========

#include "libft.h"
void	*ft_memmove(void *dest, const void *src, size_t n)
{
	if (!dest && !src)
		return (NULL);
	if (dest < src)
		ft_memcpy(dest, src, n);
	else
	{
		while (n)
		{
			n--;
			((char *)dest)[n] = ((char *)src)[n];
		}
	}
	return (dest);
}


// ========== libft/ft_memset.c ==========

#include "libft.h"
void	*ft_memset(void *s, int c, size_t n)
{
	size_t	i;
	i = 0;
	while (i < n)
	{
		((unsigned char *)s)[i++] = (unsigned char)c;
	}
	return (s);
}


// ========== libft/ft_putchar_fd.c ==========

#include "libft.h"
void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}


// ========== libft/ft_putendl_fd.c ==========

#include "libft.h"
void	ft_putendl_fd(char *s, int fd)
{
	int	i;
	i = 0;
	while (*(s + i))
		write(fd, &*(s + i++), 1);
	write(fd, "\n", 1);
}


// ========== libft/ft_putnbr_fd.c ==========

#include "libft.h"
void	ft_putnbr_fd(int n, int fd)
{
	if (n == -2147483648)
	{
		ft_putstr_fd("-2147483648", fd);
		return ;
	}
	if (n < 0)
	{
		ft_putchar_fd('-', fd);
		n = n * -1;
	}
	if (n < 10)
	{
		ft_putchar_fd(n + '0', fd);
	}
	else if (n >= 10)
	{
		ft_putnbr_fd((n / 10), fd);
		ft_putchar_fd((n % 10 + '0'), fd);
	}
}


// ========== libft/ft_putstr_fd.c ==========

#include "libft.h"
void	ft_putstr_fd(char *s, int fd)
{
	int	i;
	i = 0;
	while (*(s + i))
		write(fd, &*(s + i++), 1);
}


// ========== libft/ft_split.c ==========

#include "libft.h"
static int	count_words(const char *s, char c)
{
	int	i;
	int	count;
	i = 0;
	count = 0;
	while (*(s + i))
	{
		if (*(s + i) != c)
		{
			count++;
			while (*(s + i) && *(s + i) != c)
				i++;
		}
		else if (*(s + i) == c)
			i++;
	}
	return (count);
}
static int	get_len(const char *s, char c)
{
	int	len;
	len = 0;
	while (*(s + len) && *(s + len) != c)
	{
		len++;
	}
	return (len);
}
void	free_mem(int in_word, char **array)
{
	while (in_word >= 0)
	{
		free(*(array + in_word));
		in_word--;
	}
	free(array);
}
char	**split(char const *s, char c, char **array, int n_words)
{
	int	in_word;
	int	on_char;
	in_word = 0;
	on_char = 0;
	while (in_word < n_words)
	{
		while (*(s + on_char) && *(s + on_char) == c)
			on_char++;
		*(array + in_word) = ft_substr(s, on_char, get_len((s + on_char), c));
		if (!*(array + in_word))
		{
			free_mem(in_word, array);
			return (NULL);
		}
		while (*(s + on_char) && *(s + on_char) != c)
		{
			on_char++;
		}
		in_word++;
	}
	*(array + in_word) = NULL;
	return (array);
}
char	**ft_split(char const *s, char c)
{
	int		n_words;
	char	**array;
	n_words = count_words(s, c);
	if (!s)
		return (NULL);
	array = (char **)malloc(sizeof(char *) * (n_words + 1));
	if (!array)
		return (NULL);
	array = split(s, c, array, n_words);
	return (array);
}


// ========== libft/ft_strchr.c ==========

#include "libft.h"
char	*ft_strchr(const char *s, int c)
{
	char	*str;
	str = (char *)s;
	if ((char)c == '\0')
		return ((void *)str + ft_strlen(s));
	while (*str)
	{
		if (*str == (char)c)
			return (str);
		str++;
	}
	return (NULL);
}


// ========== libft/ft_strdup.c ==========

#include "libft.h"
char	*ft_strdup(const char *s)
{
	auto char *array;
	auto size_t len, i;
	len = ft_strlen(s);
	array = malloc(sizeof(char) * len + 1);
	if (array == NULL)
		return (NULL);
	i = 0;
	while (i < len)
	{
		array[i] = s[i];
		i++;
	}
	array[i] = '\0';
	return (array);
}


// ========== libft/ft_striteri.c ==========

#include "libft.h"
void	ft_striteri(char *s, void (*f)(unsigned int, char*))
{
	unsigned int	i;
	i = 0;
	while (*(s + i))
	{
		f(i, s + i);
		i++;
	}
}


// ========== libft/ft_strjoin.c ==========

#include "libft.h"
char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*substr;
	size_t	i;
	substr = malloc(sizeof(char) * (ft_strlen(s1) + ft_strlen(s2) +1));
	if (substr == NULL)
		return (NULL);
	i = 0;
	while (*s1)
	{
		substr[i] = *s1;
		i++;
		s1++;
	}
	while (*s2)
	{
		substr[i] = *s2;
		i++;
		s2++;
	}
	substr[i] = '\0';
	return (substr);
}


// ========== libft/ft_strlcat.c ==========

#include "libft.h"
size_t	ft_strlcat(char *dst, const char *src, size_t size)
{
	auto size_t i_src, i_dst, result;
	i_src = ft_strlen(src);
	i_dst = ft_strlen(dst);
	result = i_src;
	if (size <= i_dst)
		result += size;
	else
		result += i_dst;
	i_src = 0;
	while (src[i_src] != '\0' && i_dst + 1 < size)
		dst[i_dst++] = src[i_src++];
	dst[i_dst] = '\0';
	return (result);
}


// ========== libft/ft_strlcpy.c ==========

#include "libft.h"
size_t	ft_strlcpy(char *dst, const char *src, size_t size)
{
	size_t	i;
	size_t	len;
	i = 0;
	len = 0;
	while (src[len] != '\0')
		len++;
	if (size < 1)
		return (len);
	while (src[i] != '\0' && i < size - 1)
	{
		dst[i] = src[i];
		i++;
	}
	dst[i] = '\0';
	return (len);
}


// ========== libft/ft_strlen.c ==========

#include "libft.h"
size_t	ft_strlen(const char *s)
{
	size_t	i;
	i = 0;
	while (s[i])
		i++;
	return (i);
}


// ========== libft/ft_strmapi.c ==========

#include "libft.h"
char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	size_t	i;
	char	*str;
	str = malloc(sizeof(char) * ft_strlen(s) + 1);
	if (!str)
		return (NULL);
	i = 0;
	while (*(s + i))
	{
		*(str + i) = f(i, *(s + i));
		i++;
	}
	*(str + i) = '\0';
	return (str);
}


// ========== libft/ft_strncmp.c ==========

#include "libft.h"
int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	size_t	i;
	i = 0;
	if (n == 0)
		return (0);
	n = n - 1;
	while (s1[i] != '\0' && s2[i] != '\0' && s1[i] == s2[i] && i < n)
		i++;
	return ((unsigned char)s1[i] - (unsigned char)s2[i]);
}


// ========== libft/ft_strnstr.c ==========

#include "libft.h"
char	*ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t	i;
	size_t	j;
	if (*little == '\0')
		return ((char *)big);
	i = 0;
	while (big[i] != '\0' && i < len)
	{
		j = 0;
		if (big[i] == little[0])
		{
			while ((big[i + j] == little[j]) && ((i + j) < len)
				&& (big[i + j] != '\0'))
			{
				j++;
				if (little[j] == '\0')
					return ((char *)big + i);
			}
		}
		i++;
	}
	return (NULL);
}


// ========== libft/ft_strrchr.c ==========

#include "libft.h"
char	*ft_strrchr(const char *s, int c)
{
	char	*str;
	int		i;
	str = (char *)s;
	i = (int)ft_strlen(str);
	if ((char) c == '\0')
		return ((void *)s + ft_strlen(s));
	while (i >= 0)
	{
		if (str[i] == (char)c)
			return (str + i);
		i--;
	}
	return (NULL);
}


// ========== libft/ft_strtrim.c ==========

#include "libft.h"
char	*ft_strtrim(char const *s1, char const *set)
{
	auto int beg = 0, len, i = 0;
	auto char *str;
	if (!s1 || !set)
		return (NULL);
	len = ft_strlen(s1) - 1;
	while (ft_strchr(set, s1[beg]) && beg <= len)
		beg++;
	if (beg > len)
		return (ft_strdup(""));
	while (ft_strchr(set, s1[len]))
		len--;
	str = malloc(sizeof(char) * len - beg + 2);
	if (!str)
		return (NULL);
	while (beg <= len)
	{
		str[i] = s1[beg];
		beg++;
		i++;
	}
	str[i] = '\0';
	return (str);
}


// ========== libft/ft_substr.c ==========

#include "libft.h"
char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	auto char *array;
	auto unsigned int i;
	if (!s)
		return (NULL);
	if (ft_strlen(s) < start)
		return (ft_strdup(""));
	if (len > ft_strlen(s) - start)
		len = ft_strlen(s) - start;
	array = malloc(sizeof(char) * len + 1);
	if (array == NULL)
		return (NULL);
	i = 0;
	while (len--)
	{
		array[i++] = s[start++];
	}
	array[i] = '\0';
	return (array);
}


// ========== libft/ft_tolower.c ==========

#include "libft.h"
int	ft_tolower(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (c + 32);
	return (c);
}


// ========== libft/ft_toupper.c ==========

#include "libft.h"
int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		return (c - 32);
	return (c);
}
